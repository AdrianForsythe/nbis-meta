localrules:
    uniref_to_kaiju_fasta

rule uniref_to_kaiju_fasta:
    input:
        fastafile = opj(config["diamond_dbpath"],"uniref{n}.fasta")
    output:
        fastafile = opj(config["classifier_db_path"],"kaiju","kaiju_uniref{n}.faa")
    run:
        from Bio.SeqIO import parse
        dbdir = os.path.dirname(output.fastafile)
        shell("mkdir -p {dbdir}")
        import re
        taxre = re.compile("TaxID=(\d+)")
        taxids = {}
        with open(output.fastafile, 'w') as fh_out, open(input.fastafile, 'r') as fh_in:
            for record in parse(fh_in, "fasta"):
                match = taxre.search(str(record.description))
                try:
                    taxid = match.group().split("=")[-1]
                except AttributeError:
                    continue
                try:
                    taxids[taxid]+=1
                except KeyError:
                    taxids[taxid] = 1
                fh_out.write(">{}_{}\n{}\n".format(taxids[taxid],taxid,str(record.seq)))

rule build_kaiju_db:
    input:
        fastafile = opj(config["classifier_db_path"],"kaiju","kaiju_uniref{n}.faa")
    output:
        dbfile = opj(config["classifier_db_path"],"kaiju","kaiju_uniref{n}.fmi"),
        bwt = temp(opj(config["classifier_db_path"],"kaiju","kaiju_uniref{n}.bwt")),
        sa = temp(opj(config["classifier_db_path"],"kaiju","kaiju_uniref{n}.sa"))
    params: prefix = opj(config["classifier_db_path"],"kaiju","kaiju_uniref{n}")
    threads: 20
    resources:
        runtime = lambda wildcards, attempt: attempt**2*60*48
    conda: "../../../envs/kraken.yaml"
    shell:
        """
        mkbwt -n {threads} -a ACDEFGHIKLMNPQRSTVWY -o {params.prefix} {input.fastafile}
        mkfmi {params.prefix}
        """