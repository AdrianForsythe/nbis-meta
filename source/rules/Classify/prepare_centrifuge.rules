localrules:
    download_centrifuge_build,
    extract_centrifuge_sequences,
    extract_centrifuge_seqidmap,
    centrifuge_sqlite_taxdb,
    centrifuge_summary

def get_centrifuge_index_url(config):
    d = {'nt_2018_2_12': 'ftp://ftp.ccb.jhu.edu/pub/infphilo/centrifuge/data/nt_2018_2_12.tar.gz',
         'nt_2018_3_3': 'ftp://ftp.ccb.jhu.edu/pub/infphilo/centrifuge/data/nt_2018_3_3.tar.gz',
         'p+h+v': 'ftp://ftp.ccb.jhu.edu/pub/infphilo/centrifuge/data/p+h+v.tar.gz',
         'p_compressed+h+v': 'ftp://ftp.ccb.jhu.edu/pub/infphilo/centrifuge/data/p_compressed+h+v.tar.gz',
         'p_compressed_2018_4_15': 'ftp://ftp.ccb.jhu.edu/pub/infphilo/centrifuge/data/p_compressed_2018_4_15.tar.gz'}
    try:
        url = d[config["centrifuge_base"]]
    except KeyError:
        url = ""
    return url

rule download_assembly_summary:
    """Downloads assembly summary files for a certain domain from NCBI"""
    output:
        opj(config["resource_path"],"ncbi","assembly_lists","assembly_summary_{domain}.txt")
    message: "Downloading assembly summary for {wildcards.domain}"
    shell:
        """
        dir=$(dirname {output[0]})
        mkdir -p $dir
        curl -o {output[0]} ftp://ftp.ncbi.nlm.nih.gov/genomes/refseq/{wildcards.domain}/assembly_summary.txt
        """

rule download_centrifuge_build:
    """Downloads pre-built centrifuge index"""
    output:
        db = expand(opj(config["centrifuge_dir"], "{base}.{i}.cf"), i=[1,2,3], base=config['centrifuge_base'])
    params:
        dir = config["centrifuge_dir"],
        tar = opj(config["centrifuge_dir"], "{base}.tar.gz".format(base=config["centrifuge_base"]))
    run:
        url = get_centrifuge_index_url(config)
        shell("curl -o {params.tar} {url}")
        shell("tar -C {params.dir} -xvf {params.tar}")
        shell("rm {params.tar}")

rule extract_centrifuge_sequences:
    """Extracts input sequences from centrifuge database"""
    input:
        db = expand(opj(config["centrifuge_dir"], "{base}.{i}.cf"),
            i=[1,2,3], base=config['centrifuge_base'])
    output:
        fna = opj(config["centrifuge_dir"], "input-sequences.fna.gz")
    params:
        prefix = opj(config["centrifuge_dir"], "{base}".format(base=config["centrifuge_base"]))
    run:
        unzipped = (output.fna).replace(".gz", "")
        if os.path.exists(unzipped):
            shell("gzip -c {unzipped} > {output.fna}")
        else:
            shell("centrifuge-inspect {params.prefix} | gzip -c > {output.fna}")

rule extract_centrifuge_seqidmap:
    """Extracts sequence id to taxonomy idmapping from centrifuge database"""
    input:
        db = expand(opj(config["centrifuge_dir"], "{base}.{i}.cf"), i=[1,2,3], base=config["centrifuge_base"])
    output:
        map = opj(config["centrifuge_dir"], "seqid2taxid.map")
    params:
        prefix = opj(config["centrifuge_dir"], "{base}".format(base=config["centrifuge_base"]))
    shell:
        """
        centrifuge-inspect --conversion-table {params.prefix} > {output.map}
        """

rule centrifuge_summary:
    """Create a summary of sequences and total size at a certain rank"""
    input:
        dbfiles = expand(opj(config["centrifuge_dir"],"{base}.{i}.cf"), i=[1,2,3], base=config["centrifuge_base"]),
        mapfile = opj(config["centrifuge_dir"],"seqid2taxid.map")
    output:
        rank_summary = expand(opj(config["centrifuge_dir"],"{base}.{rank}.summary.tab"),
            base=config["centrifuge_base"], rank = config["centrifuge_summarize_rank"])

    params:
        prefix = opj(config["centrifuge_dir"], "{base}".format(base=config["centrifuge_base"])),
        script = opj("source","utils","summarize_centrifuge_db.py")
    shell:
        """
        centrifuge-inspect --summary {params.prefix} > {params.prefix}.summary
        python {params.script} --summary {params.prefix}.summary --seqid2taxidmap {input.mapfile} \
        --rank {config[centrifuge_summarize_rank]} > {output.rank_summary}
        """

rule centrifuge_sqlite_taxdb:
    """Creates a sqlite database for ete3 in the centrifuge path"""
    output:
        opj(config["centrifuge_dir"],"taxonomy","taxdb.sqlite"),
        opj(config["centrifuge_dir"],"taxonomy","taxdb.sqlite.traverse.pkl")
    message: "Creating ete3 sqlite taxonomy database in {output[0]}"
    shadow: "minimal"
    run:
        from ete3 import NCBITaxa
        shell("touch {output[0]}")
        ncbi_taxa = NCBITaxa(output[0])