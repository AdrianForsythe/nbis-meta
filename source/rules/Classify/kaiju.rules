localrules:
    kaiju_to_krona_pe,
    kaiju_krona_html_pe,
    kaiju_to_krona_se,
    kaiju_krona_html_se

rule kaiju_pe:
    input:
        R1 = opj(config["intermediate_path"],"preprocess","{sample}_{run}_R1"+PREPROCESS+".fastq.gz"),
        R2 = opj(config["intermediate_path"],"preprocess","{sample}_{run}_R2"+PREPROCESS+".fastq.gz"),
        nodes = opj(config["taxdb"],"nodes.dmp"),
        db = opj("resources","classifier_db","kaiju","kaiju_{}.fmi".format(config["diamond_dbtype"]))
    output:
        opj(config["results_path"],"kaiju","{sample}_{run}_pe.kaiju.out")
    threads: 10
    resources:
        runtime = lambda wildcards, attempt: attempt**60*4
    params:
        temp_out = opj(os.path.expandvars(config["scratch_path"]),"kaiju-{sample}_{run}.tmp"),
        temp_R1 = opj(os.path.expandvars(config["scratch_path"]),"kaiju-{sample}_{run}_R1.fq"),
        temp_R2 = opj(os.path.expandvars(config["scratch_path"]),"kaiju-{sample}_{run}_R2.fq"),
    conda: "../../envs/kraken.yaml"
    shell:
        """
        gunzip -c {input.R1} > {params.temp_R1}
        gunzip -c {input.R2} > {params.temp_R2}
        kaiju -z {threads} -t {input.nodes} -f {input.db} -i {params.temp_R1} -j {params.temp_R2} -o {params.temp_out}
        mv {params.temp_out} {output[0]}
        rm {params.temp_R1} {params.temp_R2}
        """

rule kaiju_se:
    input:
        se = opj(config["intermediate_path"],"preprocess","{sample}_{run}_se"+PREPROCESS+".fastq.gz"),
        nodes = opj(config["taxdb"],"nodes.dmp"),
        db = opj("resources","classifier_db","kaiju","kaiju_{}.fmi".format(config["diamond_dbtype"]))
    output:
        opj(config["results_path"],"kaiju","{sample}_{run}_se.kaiju.out")
    threads: 10
    params:
        temp_out = opj(os.path.expandvars(config["scratch_path"]),"kaiju-{sample}_{run}.tmp"),
        temp_se = opj(os.path.expandvars(config["scratch_path"]),"kaiju-{sample}_{run}_se.fq")
    resources:
        runtime = lambda wildcards, attempt: attempt**60*4
    conda: "../../../envs/kraken.yaml"
    shell:
        """
        gunzip -c {input.se} > {params.temp_se}
        kaiju -z {threads} -t {input.nodes} -f {input.db} -i {params.temp_se} -o {params.temp_out}
        mv {params.temp_out} {output[0]}
        rm {params.temp_se}
        """

rule kaiju2krona_pe:
    input:
        f = opj(config["results_path"],"kaiju","{sample}_{run}_pe.kaiju.out"),
        nodes = opj(config["taxdb"],"nodes.dmp"),
        names = opj(config["taxdb"],"names.dmp")
    output:
        opj(config["results_path"],"kaiju","{sample}_{run}_pe.kaiju.out.krona")
    conda: "../../../envs/kraken.yaml"
    shell:
        """
        kaiju2krona -t {input.nodes} -n {input.names} -i {input.f} -o {output[0]}
        """

rule kaiju2krona_se:
    input:
        f = opj(config["results_path"],"kaiju","{sample}_{run}_se.kaiju.out"),
        nodes = opj(config["taxdb"],"nodes.dmp"),
        names = opj(config["taxdb"],"names.dmp")
    output:
        opj(config["results_path"],"kaiju","{sample}_{run}_se.kaiju.out.krona")
    conda: "../../../envs/kraken.yaml"
    shell:
        """
        kaiju2krona -t {input.nodes} -n {input.names} -i {input.f} -o {output[0]}
        """

rule kaiju_krona_html_pe:
    """Generate a Krona HTML report for a sample"""
    input:
        opj(config["results_path"],"kaiju","{sample}_{run}_pe.kaiju.out.krona")
    output:
        opj(config["results_path"],"kaiju","{sample}_{run}_pe.html")
    shell:
        """
        ktImportText -o {output} {input}
        """

rule kaiju_krona_html_se:
    """Generate a Krona HTML report for a sample"""
    input:
        opj(config["results_path"],"kaiju","{sample}_{run}_se.kaiju.out.krona")
    output:
        opj(config["results_path"],"kaiju","{sample}_{run}_se.html")
    shell:
        """
        ktImportText -o {output} {input}
        """
